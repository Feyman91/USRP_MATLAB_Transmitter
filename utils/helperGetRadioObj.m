function [radio, varargout] = helperGetRadioObj(ofdmParams, mode)
% helperGetRadioObj 为USRP收发配置生成通用对象
%   输入:
%     ofdmParams - 配置参数结构体
%     mode       - 模式，'tx'或'rx'（发送或接收）
%   输出:
%     radio      - 根据mode返回的SDRuTransmitter或SDRuReceiver对象
%     varargout  - 发送模式下可选返回spectrumAnalyzer对象

% 检查 mode 参数是否被输入
if ~exist('mode', 'var')
    error('Mode must be specified as either "tx" or "rx".');
end

switch ofdmParams.RadioDevice
    case {'B200', 'B210'}
        if strcmpi(mode, 'tx')
            radio = comm.SDRuTransmitter(...
                'Platform',            ofdmParams.RadioDevice, ...
                'SerialNum',           ofdmParams.SerialNum, ...
                'ChannelMapping',      ofdmParams.channelmapping, ...
                'MasterClockRate',     ofdmParams.MasterClockRate, ...
                'CenterFrequency',     ofdmParams.CenterFrequency, ...
                'Gain',                ofdmParams.Gain, ...
                'InterpolationFactor', ofdmParams.InterpDecim, ...
                'EnableBurstMode',     false, ...
                'ClockSource',         'Internal');
        else
            radio = comm.SDRuReceiver(...
                'Platform',            ofdmParams.RadioDevice, ...
                'SerialNum',           ofdmParams.SerialNum, ...
                'ChannelMapping',      ofdmParams.channelmapping, ...
                'MasterClockRate',     ofdmParams.MasterClockRate, ...
                'CenterFrequency',     ofdmParams.CenterFrequency, ...
                'Gain',                ofdmParams.Gain, ...
                'DecimationFactor',    ofdmParams.InterpDecim, ...
                'SamplesPerFrame',     ofdmParams.txWaveformSize, ...
                'OutputDataType',      'double', ...
                'EnableBurstMode',     ofdmParams.enableBurstMode, ...
                'NumFramesInBurst',    ofdmParams.NumFrames + 1);
        end
    case {'N300', 'N310', 'N320/N321', 'N200/N210/USRP2', 'X300', 'X310'}
        if strcmpi(mode, 'tx')
            radio = comm.SDRuTransmitter(...
                'Platform',            ofdmParams.RadioDevice, ...
                'IPAddress',           ofdmParams.IPAddress, ...
                'ChannelMapping',      ofdmParams.channelmapping, ...
                'MasterClockRate',     ofdmParams.MasterClockRate, ...
                'CenterFrequency',     ofdmParams.CenterFrequency, ...
                'Gain',                ofdmParams.Gain, ...
                'InterpolationFactor', ofdmParams.InterpDecim);
        else
            radio = comm.SDRuReceiver(...
                'Platform',            ofdmParams.RadioDevice, ...
                'IPAddress',           ofdmParams.IPAddress, ...
                'ChannelMapping',      ofdmParams.channelmapping, ...
                'MasterClockRate',     ofdmParams.MasterClockRate, ...
                'CenterFrequency',     ofdmParams.CenterFrequency, ...
                'Gain',                ofdmParams.Gain, ...
                'DecimationFactor',    ofdmParams.InterpDecim, ...
                'SamplesPerFrame',     ofdmParams.txWaveformSize, ...
                'OutputDataType',      'double', ...
                'EnableBurstMode',     ofdmParams.enableBurstMode, ...
                'NumFramesInBurst',    ofdmParams.NumFrames + 1);
        end
end


% 如果是发送模式，返回Spectrum Analyzer对象
if strcmpi(mode, 'tx')
    spectrumAnalyze = spectrumAnalyzer( ...
        'Name',             'Signal Spectrum', ...
        'Title',            'Transmitted Signal', ...
        'SpectrumType',     'Power', ...
        'Method',           'welch', ...
        'FrequencyResolutionMethod', 'rbw', ...
        'FrequencySpan',    'Full', ...
        'SampleRate',       ofdmParams.SampleRate, ...
        'ShowLegend',       true, ...
        'Position',         [100 100 800 500], ...
        'ChannelNames',     {'Transmitted'});
    varargout{1} = spectrumAnalyze;
end

end
